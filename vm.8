.\" Text automatically generated by txt2man
.TH vm-bhyve  "29 June 2015" "" ""
.SH NAME
\fBvm-bhyve \fP- Utility for creating and managing bhyve virtual machines
.SH SYNOPSIS
.nf
.fam C
\fBvm\fP \fIinit\fP
\fBvm\fP \fIswitch\fP \fIlist\fP
\fBvm\fP \fIswitch\fP \fIcreate\fP \fIname\fP
\fBvm\fP \fIswitch\fP \fIvlan\fP \fIname\fP \fI0-4094\fP
\fBvm\fP \fIswitch\fP \fIadd\fP \fIname\fP \fIinterface\fP
\fBvm\fP \fIswitch\fP \fIremove\fP \fIname\fP \fIinterface\fP
\fBvm\fP \fIswitch\fP \fIdestroy\fP \fIname\fP

\fBvm\fP \fIcreate\fP [\fB-t\fP \fItemplate\fP] [\fB-s\fP \fIsize\fP] \fIname\fP
\fBvm\fP \fIinstall\fP \fIname\fP \fIiso\fP
\fBvm\fP \fIstart\fP \fIname\fP
\fBvm\fP \fIstop\fP \fIname\fP
\fBvm\fP \fIconsole\fP \fIname\fP

\fBvm\fP \fIstartall\fP
\fBvm\fP \fIstopall\fP

\fBvm\fP \fIiso\fP [\fIurl\fP]
.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBvm\fP-bhyve is a utility to simplify managing bhyve virtual machines.
.PP
To ease network configuration, one or more virtual switches can be created
and assigned physical interfaces and a \fIname\fP. In virtual machine configuration
only the \fIswitch\fP \fIname\fP is required, \fBvm\fP-bhyve automatically creates all necessary
network interfaces and bridges.
.PP
All configuration for virtual machines is stored in an easy to edit configuration file
that is created from a \fItemplate\fP. Using templates allows you to very quickly \fIcreate\fP
new virtual machines that have a specific configuration (cpu, memory, networking, etc).
.PP
Once created, virtual machines can be started and stopped using simple commands. All
reboot and shutdown events from within the guest are handled as expected.
.SH BASIC SETUP
Once \fBvm\fP-bhyve is installed, \fIcreate\fP the directory which will store your virtual machine data.
This directory is referred to as $VM_PATH in this man page.
.PP
Add the following to /etc/rc.conf to enable \fBvm\fP-bhyve and set default configuration:
.PP
.nf
.fam C
    vm_enable="YES"
    vm_path="/your/vm/path"
    vm_list=""
    vm_delay="5"

.fam T
.fi
The $vm_list variable is a space separated \fIlist\fP that specifies the guests to \fIstart\fP on boot.
$vm_delay is the delay in seconds between starting guests. 5 is a safe minimum for this
value, although you may want to increase this if you have many disk-intensive guests
and want to make sure each one has a chance to boot before the next starts.
.PP
Now run the \fBvm\fP \fIinit\fP command to complete the basic setup and initialise any needed modules
.PP
Copy the sample templates into the $VM_PATH/.templates folder. You can modify the sample
templates as required or \fIcreate\fP your own.
.PP
At this point you are ready to \fIstart\fP creating virtual switches and guests.
.SH SUBCOMMANDS

\fIinit\fP
.PP
.nf
.fam C
    This should be run once on each boot. This is normally done on boot by the included
    rc.d script. Its main functions are as follows:

      o  Load all necessary kernel modules if not already loaded
      o  Set tap devices to come up automatically when opened
      o  Create any virtual switches that have already been configured

.fam T
.fi
\fIswitch\fP \fIlist\fP
.PP
.nf
.fam C
    List virtual switches. This reads all configured virtual switches from the $VM_PATH/.config/switch
    file and displays them. If the virtual switches are loaded, it also displays the bridge interface
    that has been assigned to each one.

.fam T
.fi
\fIswitch\fP \fIcreate\fP \fIname\fP
.PP
.nf
.fam C
    Create a new virtual switch. The name must be supplied and may only contain letters and dashes,
    although the dash character cannot be at the start or end of the name.

    When a new switch is created, the configuration file is updated and the new bridge is created

.fam T
.fi
\fIswitch\fP \fIvlan\fP \fIname\fP \fI0-4094\fP
.PP
.nf
.fam C
    Assign a VLAN number to a virtual switch.

    When adding an interface to a virtual switch that has a VLAN number assigned, vm-bhyve will
    automatically create a new vlan interface. The vlan interface will be given the relevant VLAN
    tag and parent interface. It is the vlan interface which is then added to the switch.

    Adding a VLAN number to a switch that already contains interfaces will cause all interfaces
    to be removed and re-configured.

    To remove VLAN configuration from a virtual switch, specify a VLAN number of 0.

.fam T
.fi
\fIswitch\fP \fIadd\fP \fIname\fP \fIinterface\fP
.PP
.nf
.fam C
    Add the specified interface to the named virtual switch.

    As with all switch configuration, this is persistent and will be recreated on boot. On a normal
    virtual switch, this causes the specified interface to be added to the bridge for the relevent
    switch. If a VLAN is configured on the switch, a new vlan interface will be created and then vlan
    interface will be added to the bridge. See the vlan description above for more information.

.fam T
.fi
\fIswitch\fP \fIremove\fP \fIname\fP \fIinterface\fP
.PP
.nf
.fam C
    Removes the specified interface for the virtual switch named.

.fam T
.fi
\fIswitch\fP \fIdestroy\fP \fIname\fP
.PP
.nf
.fam C
    Completely destroy the named virtual switch and remove it from the persistent configuration file.

.fam T
.fi
\fIcreate\fP [\fB-t\fP \fItemplate\fP] [\fB-s\fP \fIsize\fP] \fIname\fP
.PP
.nf
.fam C
    Create a new virtual machine. By default, the template defualt.conf is used and a 20GB virtual
    disk image is created. This command will create the virtual machine directory $VM_PATH/$VM_NAME,
    and create the configuration file and disk image within.

    -t template    Use the specified template (without .conf suffix)
    -s size        Disk image size in GB (default is 20GB)

.fam T
.fi
\fIinstall\fP \fIname\fP \fIiso\fP
.PP
.nf
.fam C
    Start the installation procedure for the named virtual machine, using the specified ISO file.
    The ISO argument should be the filename of the ISO file, which should already exist in the
    $VM_PATH/.iso directory. ISO files can be downloaded into this dircetory using the iso command.

    Once started, the guest loader will be started on the foreground. This allows you to choose the
    Install boot option for guests that require it. Once the loader has completed, you will be returned
    to the shell and bhyve will be running in the background. Use the console command to connect to the
    guest and complete installation.

    After installation, the guest can be rebooted and will boot off its own disk. At this point, the
    installation ISO file is still attached, allowing you to use the installation ISO for any post
    installation tasks. The ISO file will remain attached until the guest is completely shutdown.

.fam T
.fi
\fIstart\fP \fIname\fP
.PP
.nf
.fam C
    Start the named virtual machine. The virtual machine will start completely in the background.
    Use the console command to connect to it.

    For each network adapter specified in the configuration file, a tap interface will be created.
    If possible, the tap device will be assigned to the correct bridge for the chosen virtual switch.

.fam T
.fi
\fIstop\fP \fIname\fP
.PP
.nf
.fam C
    Stop a named virtual machine. All tap and nmdm devices will be automatically removed.

.fam T
.fi
\fIconsole\fP \fIname\fP
.PP
.nf
.fam C
    Connect to the console of the named virtual machine. Without network access, this is the primary
    way of connecting to the virtual machine once it is running.

    This looks for the null modem (nmdm) device associated with the relevenat virtual machine, and
    connects to it with cu. Use ~+Ctrl-D to exit the console.

.fam T
.fi
\fIstartall\fP
.PP
.nf
.fam C
    Start all virtual machines configured for auto-start.

    The list of virtual machines to start should be specified in /etc/rc.conf using the $vm_list variable.
    This allows you to use shared storage for virtual machine data, whilst making sure that the correct
    guests start automatically on each host.

    The delay between starting guests can be set using the $vm_delay rc.conf variable, which defaults to 5
    seconds. Too small a delay can cause problems as each guest doesn't have enough time to claim a null
    modem console device before the next guest starts.

.fam T
.fi
\fIstopall\fP
.PP
.nf
.fam C
    This stops *all* bhyve guests currently running on the system.

.fam T
.fi
\fIiso\fP [\fIurl\fP]
.PP
.nf
.fam C
    Without a URL specified, this lists the available ISO images in the $VM_PATH/.iso directory.

    If a URL is specified, it will attempt to fetch the specified file into the iso directory using
    fetch.

.fam T
.fi
.SH SEE ALSO
\fBbhyve\fP(8), \fBbhyveload\fP(8), \fBtap\fP(4), \fBbridge\fP(4), \fBvlan\fP(4), \fBnmdm\fP(4), \fBcu\fP(1), \fBfetch\fP(1)
.SH BUGS
Please report bugs/issues/feature requests to the github project at
https://github.com/churchers/\fBvm\fP-bhyve
.SH AUTHORS
Matt Churchyard <churchers@gmail.com>