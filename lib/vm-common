#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2015 Matt Churchyard (churchers@gmail.com)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# make sure we have the right environment
__setup(){
        __load_module "vmm"
        __load_module "nmdm"
        __load_module "if_bridge"
        __load_module "if_tap"

        sysctl net.link.tap.up_on_open=1 >/dev/null 2>&1
}

# load a kernel module
__load_module(){
        local _mod="$1"
        kldstat -n ${_mod} >/dev/null 2>&1
        if [ $? -ne 0 ]; then
                kldload ${_mod} >/dev/null 2>&1
                [ $? -ne 0 ] && __err "unable to load ${_mod}.ko!"
        fi
}

# show usage
__usage(){
cat << EOT
vm: Bhyve virtual machine managament v${VERSION}
Usage: vm ...
        init
        switch list
        switch create <name>
        switch vlan <name> <vlan|0>
        switch add <name> <interface>
        switch remove <name> <interface>
        switch destroy <name>
	list
        create [-t template] [-s size] <name>
        install <name> <iso>
        start <name>
        stop <name>
        console <name>
        startall
        stopall
	reset <name>
	poweroff <name>
	configure <name>
        iso [url]
EOT
        exit 1
}

# error
__err(){
        echo "${0}: ERROR: $1"
        exit 1
}

# warn
__warn(){
        echo "${0}: WARNING: $1"
}

# confirm yes or no
__confirm(){
	local _msg="$1"
	local _resp

	while read -p "${_msg} (y/n)? " _resp; do
		case "${_resp}" in
			y*)
				return 0
				;;
			n*)
				return 1
				;;
		esac
	done
}
