#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2015 Matt Churchyard (churchers@gmail.com)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# __guest_*
# these functions are responsible for doing any pre-load tasks for a guest
# for non uefi guests this normally means running bhyveload or grub-bhyve
# these functions should update _exit to a non-zero value if there's a problem
# or 0 on success
# As these functions are called from within the scope of __vm_run,
# the following variables are already set (among others)
#
# _name: guest name
# _com: com port - /dev/nmdmXA
# _iso: iso file (if an install)
# _conf: full path to guest config file
# _cpu: cpu count
# _memory: RAM
# _guest: guest type
# _bootdisk: full path to primary disk
#
# we have every bhyveload/grub-bhyve call entered twice, once to log and
# once to actually run. bit of a pain but makes for useful logs.
#
# I've written append wrong as it just needs to be something other than 'write',
# and is much more readable when all the __log* calls line up
#
# @modifies _exit
# @param string _type=install|run whether this is an install or normal run
#

# FreeBSD
__guest_freebsd(){

    _loader="bhyveload"
    __guest_generic "$1"
}

# Linux
__guest_linux(){

    _loader="grub"
    __guest_generic "$1"
}

# Windows
__guest_windows(){
    _exit=0
}

# Generic guest
#
# this now handles most guest types.
# we have config variable "loader" to set whether bhyveload or grub should be used.
# all grub commands are specified in guest config file
#
__guest_generic(){
    local _type="$1"
    local _partition _args _grub_opt
    local _root="hd0"
    local _bcmd="${vm_dir}/${_name}/grub.cmd"

    __config_get "_partition" "grub_run_partition"

    [ "${_wiredmem}" = "1" ] && _args=" -S"
    [ -n "${_partition}" ] && _root="hd0,${_partition}"

    if [ "${_type}" = "install" ]; then 
        if [ "${_loader}" = "bhyveload" ]; then

            _args="${_args} -c ${_com} -m ${_memory} -d ${vm_dir}/.iso/${_iso} ${_name}"

            __log "guest" "${_name}" "bhyveload${_args}"
            bhyveload ${_args}

            _exit=$?
        elif [ "${_loader}" = "grub" ]; then
            
            __log_and_write "write" "${_name}" "device.map" "(hd0) ${_bootdisk}"
            __log_and_write "appnd" "${_name}" "device.map" "(cd0) ${vm_dir}/.iso/${_iso}"
            __guest_get_commands "install"

            if [ -e "${_bcmd}" ]; then 
                _args="${_args} -r cd0 -m ${vm_dir}/${_name}/device.map -M ${_memory} ${_name}"

                __log "guest" "${_name}" "grub-bhyve${_args} < ${_bcmd}"
                env -i TERM=xterm /usr/local/sbin/grub-bhyve ${_args} < "${_bcmd}"
            else
                _args="${_args} -c ${_com} -r cd0 -m ${vm_dir}/${_name}/device.map -M ${_memory} ${_name}"

                __log "guest" "${_name}" "grub-bhyve${_args}"
                /usr/local/sbin/grub-bhyve ${_args}
            fi

            _exit=$?
        fi
    else
        if [ "${_loader}" = "bhyveload" ]; then

            _args="${_args} -c ${_com} -m ${_memory} -d ${_bootdisk} ${_name}"

            __log "guest" "${_name}" "bhyveload${_args}"
            bhyveload ${_args}

            _exit=$?
        elif [ "${_loader}" = "grub" ]; then

            __config_get "_grub_opt" "grub_run_dir"
            [ -n "${_grub_opt}" ] && _args="${_args} -d ${_grub_opt}"
            __config_get "_grub_opt" "grub_run_file"
            [ -n "${_grub_opt}" ] && _args="${_args} -g ${_grub_opt}"

            __log_and_write "write" "${_name}" "device.map" "(hd0) ${_bootdisk}"
            __guest_get_commands "run"

            if [ -e "${_bcmd}" ]; then
                _args="${_args} -r ${_root} -m ${vm_dir}/${_name}/device.map -M ${_memory} ${_name}"

                __log "guest" "${_name}" "grub-bhyve${_args} < ${_bcmd}"
                env -i TERM=xterm /usr/local/sbin/grub-bhyve ${_args} < "${_bcmd}"
            else
                _args="${_args} -c ${_com} -r ${_root} -m ${vm_dir}/${_name}/device.map -M ${_memory} ${_name}"

                __log "guest" "${_name}" "grub-bhyve${_args}"
                /usr/local/sbin/grub-bhyve ${_args}
            fi

            _exit=$?
        fi
    fi
}

# Gets any grub-bhyve commands for this guest
# Not pretty but the best we can find that works.
# If there are no commands, grub-bhyve will run
# directly on the guests nmdm console. If there are
# we run grub-bhyve on stdout, and pipe commands in.
#
__guest_get_commands(){
    local _type="$1"
    local _command _num=0

    unlink "${_bcmd}" >/dev/null 2>&1

    __config_get "_command" "grub_${_type}${_num}"
    [ -z "${_command}" ] && return 1

    while [ -n "${_command}" ]; do
        if [ "${_num}" = "0" ]; then
            __log_and_write "write" "${_name}" "grub.cmd" "${_command}"
        else
            __log_and_write "appnd" "${_name}" "grub.cmd" "${_command}"
        fi

        _num=$((_num + 1))
        __config_get "_command" "grub_${_type}${_num}"
    done

    return 0
}
